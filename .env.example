#-------------------------------------------------------------------------------
# LLM APIs settings 
#-------------------------------------------------------------------------------
# NOTE: Open Legal RAG can use both Open AI and Ollama at the same time, but needs at least one of the two.
# NOTE: Ollama is one of the simplest ways to get started running models locally: https://ollama.ai/
OLLAMA_API_URL="http://localhost:11434"

#OPENAI_API_KEY="" 
#OPENAI_ORG_ID=""

#-------------------------------------------------------------------------------
# Court Listener API settings
#-------------------------------------------------------------------------------
# NOTE: The chatbot can make calls to the Court Listener API to pull relevant court opinions.
COURT_LISTENER_API_TOKEN=""
COURT_LISTENER_MAX_RESULTS=4
COURT_LISTENER_API_URL="https://www.courtlistener.com/api/rest/v3/"
COURT_LISTENER_BASE_URL="https://www.courtlistener.com/"

#-------------------------------------------------------------------------------
# Extract Legal Query Prompt
#-------------------------------------------------------------------------------
# NOTE: This prompt is used to identify a legal question and make it into a search statement.
EXTRACT_LEGAL_QUERY_PROMPT="
Identify whether there is a legal question in the following message and, if so, transform it into a search statement. 
In that context, a search statement is a combination of keywords, sometimes linked with logical operators (AND, OR, NOT) that can be used in the \"search\" form of a legal database.
Use quotation marks around proper nouns and terms that should not be broken up.

Return your response as a JSON object containing the following keys:
- search_statement: String representing the generated search statement. Is empty if the text does not contain a legal question.

Here is the message you need to analyze: 
"
