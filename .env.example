#-------------------------------------------------------------------------------
# LLM APIs settings 
#-------------------------------------------------------------------------------
# NOTE: Open Legal RAG can use both Open AI and Ollama at the same time, but needs at least one of the two.
# NOTE: Ollama is one of the simplest ways to get started running models locally: https://ollama.ai/
OLLAMA_API_URL="http://localhost:11434"

#OPENAI_API_KEY="" 
#OPENAI_ORG_ID=""

#-------------------------------------------------------------------------------
# Court Listener API settings
#-------------------------------------------------------------------------------
# NOTE: The chatbot can make calls to the Court Listener API to pull relevant court opinions.
COURT_LISTENER_API_TOKEN=""
COURT_LISTENER_MAX_RESULTS=4 # NOTE: To be adjusted based on the context lenght of the model used for inference.
COURT_LISTENER_API_URL="https://www.courtlistener.com/api/rest/v3/"
COURT_LISTENER_BASE_URL="https://www.courtlistener.com/"

#-------------------------------------------------------------------------------
# Extract Legal Query Prompt
#-------------------------------------------------------------------------------
# NOTE: This prompt is used to identify a legal question and make it into a search statement.
EXTRACT_LEGAL_QUERY_PROMPT="
Identify whether there is a legal question in the following message and, if so, transform it into a search statement. 
In that context, a search statement is a combination of keywords, sometimes linked with logical operators (AND, OR, NOT) that can be used in the search form of a legal database.
Use quotation marks around proper nouns and terms that should not be broken up.

The legal database we will be querying with that search statement is Court Listener. 
Here are instructions on how to generate an effective search statement for that platform.

## Dates and date ranges
If a date (or element of a date) is present in the question, you can add it to the search statement as such to define a range: 
dateFiled:[YYYY-MM-DD TO YYYY-MM-DD]

If only the year is present, set MM and DD to 01 and 01.
If only the start year is present, assume the end date is the last day of that year.
Do not wrap dateField statement in parentheses.

## Name of cases
If the question features the name of a case, you can add it to the search statement as such:
caseName:(name of a case)

Tip to recognize case names: they often feature v. or vs. As in: \"Roe v. Wade\".

## Name of court, state or jurisdiction
If the question features the name of a court or of a state, you can add it to the search statement as such:
court:(name of a court, state or jurisdiction)

## Excluded terms
The following terms do not help make good search statements and MUST NOT be present in the search statement: law, laws, case, cases, precedent, precedents, adjudicated.

## Singular vs plural
If you have identified a search term and added it to the search statement, feature it in both singular and plural when relevant.
IE: (pony AND ponies)

## Other fields available
dateFiled, caseName and court are the only fields you should use. Do not invent other fields. Everything else is a search term.

Return your response as a JSON object containing the following keys:
- search_statement: String representing the generated search statement. Is empty if the text does not contain a legal question.

Here is the message you need to analyze: 
"

#-------------------------------------------------------------------------------
# Text Completion Prompts
#-------------------------------------------------------------------------------
# Note: {history} {rag} and {message} are reserved keywords.
TEXT_COMPLETION_BASE_PROMPT = "
{history}

You are a helpful and friendly AI legal assistant.
Your explanation of legal concepts should be easy to understand while still being accurate and detailed. Explain any legal jargon, and do not assume knowledge of any related concepts.

{rag}

Request: {message}

Helpful response: 
"

# NOTE: Injected into BASE prompt when relevant.
# Inspired by LangChain's default RAG prompt.
# {rag} is a reserved keyword.
TEXT_COMPLETION_RAG_PROMPT = "
Here is context to help you fulfill the user's request:
{rag}
----------------
Context = transcripts from court opinions.
When possible, use context to answer the request from the user.
If you don't know the answer, just say that you don't know, don't try to make up an answer. 
Ignore context if it is empty or irrelevant.
When possible and relevant, use context to cite or direct quote your sources.

"

# NOTE: Injected into BASE prompt when relevant.
# NOTE: {history} is a reserved keyword
TEXT_COMPLETION_HISTORY_PROMPT = "
Here is a summary of the conversation thus far:
{history}
----------------

"